require 'alces/forge/cli_utils'
require 'alces/forge/commands/command_base'
require 'forwardable'
require 'http'
require 'open3'
require 'tempfile'
require 'zip'

module Alces
  module Forge
    module Commands
      class Install < CommandBase

        extend Forwardable
        def_delegators CLIUtils, :doing, :say, :with_spinner

        def install(args, options)
          package_props = split_package_path(args[0])

          metadata = get_package_metadata(package_props[:user], package_props[:package], package_props[:version])

          raise "No package found for #{args[0]}" unless metadata

          puts "Found package: #{metadata['attributes']['name'].bold} version #{metadata['attributes']['version'].bold}"

          package = download_package(metadata['attributes']['packageUrl'])

          extracted_dir = extract_package(package)

          run_installer(extracted_dir)

          package.unlink
          FileUtils.remove_entry(extracted_dir)

        end

        private

        def split_package_path(path)
          match = /(?<user>[^\/]+)\/(?<package>[^\/]+)(\/(?<version>[^\/]+))?/.match(path)

          raise 'Unrecognised package format. Please specify as username/packagename[/version]' unless match

          match
        end

        def get_package_metadata(user, package, version)
          params = {
              'filter[username]' => user,
              'filter[name]' => package,
              :sort => '-version'
          }

          if version
            params['filter[version]'] = version
          else
            params['sort'] = '-version'  # 'Newest' first (assuming sensible ordering from the server)
            # NB We can't sort on the standard Rails attributes (createdAt / updatedAt) since these will all read the
            # same for the Alces autogenerated packages, and earlier versions might be added later anyway.
          end

          api.get('packages', params: params)['data'].first
        end

        def download_package(url)
          temp = Tempfile.new('forge-dl')
          temp.binmode
          doing 'Downloading'
          with_spinner do
            body = HTTP.get(url).body
            while (part = body.readpartial) do
              temp.write(part)
            end
            temp.close
          end
          say 'Done'.green
          temp
        end

        def extract_package(package_file)
          dest = Dir.mktmpdir('forge-install')

          doing 'Extracting'
          with_spinner do
            Zip::File.open(package_file.path) do |zip_file|
              zip_file.each do |entry|
                entry.extract(File.join(dest, entry.name))
              end
            end
          end
          say 'Done'.green

          dest
        end

        def run_installer(dir)
          old_pwd = Dir.pwd
          stdout, stderr, status = nil

          doing 'Installing'
          with_spinner do
            Dir.chdir(dir)

            File.chmod(0700, 'install.sh')
            stdout, stderr, status = ::Open3.capture3('./install.sh')

            Dir.chdir(old_pwd)
          end

          if status.success?
            say 'Done'.green
          else
            say 'Failed'.red
            puts stderr
          end

          status
        end
      end
    end
  end
end
